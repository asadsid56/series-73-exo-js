#!/usr/bin/env node
/* leny/seve
 *
 * /src/seve.js - Main Entry point
 *
 * coded by leny@flatLand!
 * refactored at 30/10/2018
 */ /* eslint-disable no-console */"use strict";var _express=_interopRequireDefault(require("express"));var _expressHandlebars=_interopRequireDefault(require("express-handlebars"));var _chalk=_interopRequireDefault(require("chalk"));var _fs=_interopRequireDefault(require("fs"));var _path=_interopRequireDefault(require("path"));var _os=_interopRequireDefault(require("os"));var _commander=_interopRequireDefault(require("commander"));var _mimetype=_interopRequireDefault(require("mimetype"));var _humanSize=_interopRequireDefault(require("human-size"));var _moment=_interopRequireDefault(require("moment"));var _open=_interopRequireDefault(require("open"));var _micromatch=_interopRequireDefault(require("micromatch"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}let pkg=require("../package.json"),server=(0,_express.default)(),serverRoot=process.cwd(),port;_commander.default.version(pkg.version).arguments("[folder]").usage("[options] [folder]").description("Run a tiny & simple server (like, for tests & stuffs) from a given folder (or the current).").option("-p, --port <port>","port used by the server (default to 12345)").option("-q, --quiet","don't show the logs").option("-i, --index","enable autoindex").option("-e, --exclude <glob>","don't show matching files (only with autoindex)").option("-N, --no-open","don't browse to the URL at startup").action(folder=>{if(!_fs.default.existsSync(folder)){return console.log(_chalk.default.bold.red("✘ given folder doesn't exists, use current path instead."));}if(!_fs.default.statSync(folder).isDirectory()){return console.log(_chalk.default.bold.red("✘ given folder isn't a folder, use current path instead."));}serverRoot=folder;}).parse(process.argv);if(isNaN(port=+(_commander.default.port||12345))){console.log(_chalk.default.bold.red(`✘ port must be a number, '${port}' given.`));process.exit(1);}if(port<=1024&&process.getuid()!==0){console.log(_chalk.default.bold.yellow(`⚠ seve needs to be run as sudo to use port '${port}'.`));process.exit(1);}if(_commander.default.index){server.engine("hbs",(0,_expressHandlebars.default)({extname:"hbs"})).set("view engine","hbs").set("views",`${__dirname}/../views`).use("/__seve",_express.default.static(`${__dirname}/../autoindexes`)).use((request,response,next)=>{if(request.url.substr(-1)==="/"){let folder=_path.default.join(serverRoot,request.url);if(_fs.default.existsSync(`${folder}/index.html`)){return response.sendFile("./index.html",{root:_path.default.resolve(process.cwd(),folder)});}if(_fs.default.existsSync(`${folder}/index.htm`)){return response.sendFile("index.htm",{root:_path.default.resolve(process.cwd(),folder)});}return response.render("autoindex",{files:_fs.default.readdirSync(folder).filter(filename=>!(_commander.default.exclude&&_micromatch.default.isMatch(filename,_commander.default.exclude.split(",")))).map(filename=>{if(filename.substr(0,1)!=="."){let file=_fs.default.statSync(`${folder}/${filename}`),mimeType=_mimetype.default.lookup(filename);mimeType=mimeType?mimeType.split("/")[0]:"unknown";return{isFolder:file.isDirectory(),mime:file.isDirectory()?"folder":mimeType,name:filename,size:(0,_humanSize.default)(file.size),time:{raw:file.mtime,human:(0,_moment.default)(file.mtime).format("YYYY-MM-DD HH:mm:SS")}};}return false;}).sort(),folder:request.url,hasParent:request.url!=="/",port:port,root:serverRoot.replace(_os.default.homedir(),"~"),version:pkg.version});}next();});}if(!_commander.default.quiet){server.use((request,response,next)=>{const hour=new Date().toTimeString().split(" ")[0];console.log(_chalk.default.cyan(`[${hour}]`),_chalk.default.magenta(`(${request.method})`),request.url);next();});}server.use(_express.default.static(serverRoot));server.listen(port);if(_commander.default.open){(0,_open.default)(`http://localhost:${port}`);}console.log(_chalk.default.underline(`Serving folder ${_chalk.default.bold.cyan(serverRoot)} listening on port ${_chalk.default.bold.yellow(port)}.`));console.log(`Quit with (${_chalk.default.cyan("^+C")}).\n`);